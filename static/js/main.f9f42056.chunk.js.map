{"version":3,"sources":["components/SearchForm.js","components/MainNav.js","components/NotFound.js","components/Photo.js","components/PhotoContainer.js","components/PageNotFound.js","App.js","config.js","serviceWorker.js","index.js"],"names":["SearchForm","handleSubmit","e","preventDefault","props","onSearch","query","value","path","history","push","currentTarget","reset","className","onSubmit","this","type","name","placeholder","ref","input","required","fill","height","viewBox","width","xmlns","d","Component","MainNav","handleClick","target","innerText","to","onClick","React","NotFound","Photo","src","url","alt","PhotoContainer","photos","data","match","params","length","map","photo","farm","server","id","secret","key","PageNotFound","App","performSearch","setState","loading","axios","get","then","response","catch","error","console","log","state","render","exact","component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f9f42056.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass SearchForm extends Component {\n\t/* //passing performsearch() func through props and use input.value as a param\n\tpushing path in history prop\n\t@param{e} - event\n\t*/\n\thandleSubmit = e => {\n\t\te.preventDefault();\n\t\tthis.props.onSearch(this.query.value);\n\t\tconst path = `/search/${this.query.value}`;\n\t\tthis.props.history.push(path);\n\t\te.currentTarget.reset();\t\n\t}\n\n\trender() {\n\t\treturn(\t\t\t\n\t\t\t<form className=\"search-form\" onSubmit={this.handleSubmit}>\n\t\t        <input \n\t\t        \ttype=\"search\" \n\t\t        \tname=\"search\" \n\t\t        \tplaceholder=\"Search\"\n\t\t        \tref={input => this.query = input} \n\t\t        \trequired\n\t\t        />\n\t\t        <button type=\"submit\" className=\"search-button\">\n\t\t          <svg fill=\"#fff\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\n\t\t            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n\t\t          </svg>\n\t\t        </button>\n\t\t    </form>\n\t\t)\n\t}\n}\n\nexport default SearchForm;","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nclass MainNav extends React.Component {\n\t//passing performsearch() func through props and use NavLinks innertext as a param,\n\t//@param{e} - event\n\t\thandleClick = e => {\n\t\t\tconst query = e.target.innerText;\n\t\t\tthis.props.onSearch(query)\n\t\t}\n\t\trender() {\n\t\t\treturn(\n\t\t\t  <nav className=\"main-nav\">\n\t\t        <ul>\n\t\t          <li><NavLink to='/search/cats' onClick={this.handleClick}>Cats</NavLink></li>\n\t\t          <li><NavLink to='/search/dogs' onClick={this.handleClick}>Dogs</NavLink></li>\n\t\t          <li><NavLink to='/search/sunset' onClick={this.handleClick}>Sunset</NavLink></li>\n\t\t        </ul>\n\t\t      </nav>\n\t\t\t)\n\t\t}\n}\n\nexport default MainNav;","import React from 'react';\n\nconst NotFound = () => {\n\treturn(\n\t\t<li className=\"not-found\">\n\t        <h3>No Results Found</h3>\n\t        <p>'You search did not return any results. Please try again.'</p>\n        </li>\n\t)\n}\n\nexport default NotFound;","import React from 'react';\n\nconst Photo = (props) => {\n\treturn(\n\t\t<li>\n\t\t    <img src={props.url} alt=\"\" />\n\t\t</li>\n\t)\n}\n\nexport default Photo;","import React from 'react';\nimport NotFound from './NotFound';\nimport Photo from './Photo';\n\nconst PhotoContainer = (props) => {\n\t//displaying images using data from api call\n\t//dynamically displaying header of search query\n\t\tconst data = props.photos;\n\t\tconst query = props.match.params.name;\n\t\tlet photos;\n\t\tif (data.length > 0) {\n\t\t\tphotos = data.map( photo => \n\t\t\t\t<Photo url={`https://farm${photo.farm}.staticflickr.com/${photo.server}/${photo.id}_${photo.secret}.jpg`} key={photo.id} />\n\t\t\t)\n\t\t} else {\n\t\t\tphotos = <NotFound />\n\t\t}\n\t\treturn(\n\t\t\t<div className=\"photo-container\">\n\t\t        <h2>{query} images</h2>\n\t\t        <ul>\n\t\t        \t{photos}\n\t\t      \t</ul>\n\t\t    </div>\n\t\t)\n}\n\nexport default PhotoContainer;\n\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst PageNotFound = () => {\n\treturn(\n\t\t<div>\n\t\t\t<h2>Page Not Found!</h2>\n\t\t\t<button><Link to=\"/\">Return to Home Page</Link></button>\n\t\t</div>\n\t)\n}\n\nexport default PageNotFound;","import React, { Component } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport ApiKey from './config';\nimport SearchForm from './components/SearchForm';\nimport MainNav from './components/MainNav';\nimport PhotoContainer from './components/PhotoContainer';\nimport PageNotFound from './components/PageNotFound';\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      photos: [],\n      loading: true\n    }\n  }\n\n  componentDidMount() {\n    this.performSearch();\n  }\n\n/*Requesting the data, setting loading = true, \nand use the callback function of setState() to make request.\nSet loading = false after the request completes.\n@param {string} query - a tag to request for */\n  performSearch = (query) => {\n    this.setState( {loading: true}, () => {\n      axios.get(`https://www.flickr.com/services/rest/?method=flickr.photos.search&api_key=${ApiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`)\n      .then(response => {\n        this.setState({\n          photos: response.data.photos.photo,\n          loading: false\n        })\n      })\n      .catch(error => {\n        console.log('Error fetching and parsing data', error);\n      });\n    } )\n  }\n\n  render() {\n\n    return (\n      <BrowserRouter>\n        <div className=\"container\">\n        <Route render={(props) => <SearchForm onSearch={this.performSearch} loading={this.state.loading} {...props} /> } />\n          \n              \n        <MainNav onSearch={this.performSearch}/>\n          {\n            (this.state.loading) \n            ?\n            <h1>Loading...</h1> \n            :\n            <Switch>\n              <Route exact path=\"/\" render ={ () => <Redirect to=\"/search\" /> } />\n              <Route exact path=\"/React-Gallery-App/\" render ={ () => <Redirect to=\"/search\" /> } />\n              <Route path=\"/search\" exact render={(props) => <PhotoContainer photos={this.state.photos} {...props}/>} />\n              <Route path=\"/search/:name\" exact render={(props) => <PhotoContainer photos={this.state.photos} {...props}/>} /> \n              <Route component={PageNotFound} />            \n            </Switch>             \n          }\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","const ApiKey = '19888a5c175845583b164d865c95315c';\n\nexport default ApiKey;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}